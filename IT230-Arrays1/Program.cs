/*
 * DO NOT EDIT THIS FILE
 */

using System;
using System.IO;
using System.Linq;

namespace IT230_Arrays1
{
    public class Program
    {
        public static void Main()
        {
            if (File.Exists("inputs.txt") == false)
            {
                throw new FileNotFoundException("Cannot find the input file. Let your instructor know of this error ASAP.");
            }
            
            String[] lines = File.ReadAllLines("inputs.txt");
            int pointsMax = 0;
            int pointsEarned = 0;
            long totalTimeUsed = 0;
            String instruction = String.Empty;

            try
            {
                foreach (String l in lines)
                {
                    String op = l.Split()[0];

                    if (op.StartsWith("#") || op == String.Empty)
                    {
                        continue;
                    }

                    pointsMax++;
                    
                    int num = Int32.Parse(l.Split()[1]);
                    long startTime = 0;
 
                    switch (op)
                    {
                        case "a":
                            instruction = $"Adding {num} to the array";
                            Console.WriteLine(instruction);
                            int sizeBefore = Source.players == null ? 0 : Source.players.Length;
                            
                            startTime = DateTimeOffset.Now.ToUnixTimeMilliseconds();
                            Source.InsertIntoArray(num);
                            totalTimeUsed += DateTimeOffset.Now.ToUnixTimeMilliseconds() - startTime;
                            
                            if (Source.players == null)
                            {
                                Console.Error.WriteLine("Error: Expected array to be initialized, but it is null.");
                            }
                            else if(sizeBefore == Source.players.Length)
                            {
                                Console.Error.WriteLine("Error: Expected array size to increase, but it did not.");
                            }
                            else
                            {
                                pointsEarned++;
                            }
                            break;
                        case "s":
                            instruction = $"Checking array length is correct. Expecting {num}";
                            Console.WriteLine(instruction);
                            if (Source.players!.Length != num)
                            {
                                Console.Error.WriteLine($"Error: Expected array size of {num}, but got {Source.players.Length} instead.");
                            }
                            else
                            {
                                pointsEarned++;
                            }
                            break;
                        case "ft":
                            instruction = $"Checking if {num} exists in the array";
                            Console.WriteLine(instruction);
                            startTime = DateTimeOffset.Now.ToUnixTimeMilliseconds();
                            bool found1 = Source.SearchArray(num);
                            totalTimeUsed += DateTimeOffset.Now.ToUnixTimeMilliseconds() - startTime;
                            if (found1 == false)
                            {
                                Console.Error.WriteLine($"Error: Expected {num} to exist in the array, but it does not.");
                            }
                            else
                            {
                                pointsEarned++;
                            }
                            break;
                        case "ff":
                            instruction = $"Checking if {num} does not exist in the array";
                            Console.WriteLine(instruction);
                            startTime = DateTimeOffset.Now.ToUnixTimeMilliseconds();
                            bool found2 = Source.SearchArray(num);
                            totalTimeUsed += DateTimeOffset.Now.ToUnixTimeMilliseconds() - startTime;
                            if (found2 == true)
                            {
                               Console.Error.WriteLine($"Error: Expected {num} to not exist in the array, but it does.");
                            }
                            else
                            {
                                pointsEarned++;
                            }
                            break;
                        case "d":
                            instruction = $"Deleting {num} from the array";
                            Console.WriteLine(instruction);
                            int[] arrBefore = Source.players!.Clone() as int[];
                            bool arrContains = arrBefore!.Contains(num);
                            startTime = DateTimeOffset.Now.ToUnixTimeMilliseconds();
                            Source.DeleteFromArray(num);
                            totalTimeUsed += DateTimeOffset.Now.ToUnixTimeMilliseconds() - startTime;

                            if (arrContains == false && arrBefore.SequenceEqual(Source.players!) == false)
                            {
                                Console.Error.WriteLine("Error: Expected array to stay the same, but it changed.");
                                break;
                            }

                            int[] howArrayShouldLook = arrBefore.Where(x => x != num).ToArray();
                                
                            if (howArrayShouldLook.SequenceEqual(Source.players!) == false)
                            {
                                Console.Error.WriteLine("Error: Expected array to look like this: " + String.Join(", ", howArrayShouldLook) + ", but it does not.");
                            }
                            else
                            {
                                pointsEarned++;
                            }
                            break;
                        default:
                            Console.Error.WriteLine("Error: Unknown operation: " + op);
                            break;
                    }
                }
            }
            catch (Exception e)
            {
                Console.Error.WriteLine("\nCaught Exception: " + e.Message);
                Console.Error.WriteLine($"Instruction causing the exception: {instruction}.");
            }
            
            Console.WriteLine("\n-=-=-=-=-=-=-=-=-=-=-=-=-=-\n");
            Console.WriteLine($"Correctness score: {Math.Round(pointsEarned * 1.0f/pointsMax, 2) * 100}%.");
            Console.WriteLine($"Time used: {totalTimeUsed}ms");
            Console.WriteLine("(Optimization points will be calculated separately.)");
        }
    }
}